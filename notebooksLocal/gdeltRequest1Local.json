{"paragraphs":[{"text":"%md\n\n## Requête 1\n\nDans ce notebook, nous construisons la requête 1:\n\n*Afficher le nombre d’articles/évènements qu’il y a eu pour chaque triplet (jour, pays de l’évènement, langue de l’article).*","user":"anonymous","dateUpdated":"2020-01-23T00:13:38+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579249411304_410854318","id":"20181212-102323_67420128","dateCreated":"2020-01-17T08:23:31+0000","dateStarted":"2020-01-23T00:13:38+0000","dateFinished":"2020-01-23T00:13:38+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2393"},{"text":"import org.apache.spark.sql.functions\nimport org.apache.spark.input.PortableDataStream\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader","user":"anonymous","dateUpdated":"2020-01-23T00:13:38+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579249411305_-2122355673","id":"20171217-232457_1732696781","dateCreated":"2020-01-17T08:23:31+0000","dateStarted":"2020-01-23T00:13:38+0000","dateFinished":"2020-01-23T00:13:38+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2394"},{"text":"// Select files\nval pathToSelection = \"/tmp/gdelt/data/2019120[1-2]*\"\n\n// Parquet files directory (keep / at the end)\nval pathToParquet = \"/tmp/gdelt/parquet/\"","user":"anonymous","dateUpdated":"2020-01-23T00:15:57+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579364918647_-569934319","id":"20200118-162838_1638931284","dateCreated":"2020-01-18T16:28:38+0000","dateStarted":"2020-01-23T00:15:57+0000","dateFinished":"2020-01-23T00:15:57+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2395"},{"text":"// define UDF functions\ndef toYear(s : String): Int = if (s.isEmpty) 0 else (s.slice(0, 0 + 4)).toInt\ndef toMonth(s : String): Int = if (s.isEmpty) 0 else (s.slice(4, 4 + 2)).toInt\ndef toDay(s : String): Int = if (s.isEmpty) 0 else (s.slice(6, 6 + 2)).toInt\n\ndef getTone(tones: String): Double = tones.split(\",\")(0).toDouble\n\n// define UDF\nval udfToYear = udf(toYear _)\nval udfToMonth = udf(toMonth _)\nval udfToDay = udf(toDay _)\n\nval udfGetTone = udf(getTone _)","user":"anonymous","dateUpdated":"2020-01-23T09:33:24+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579734089467_1835172958","id":"20200122-230129_983388208","dateCreated":"2020-01-22T23:01:29+0000","dateStarted":"2020-01-23T00:13:38+0000","dateFinished":"2020-01-23T00:13:38+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2396"},{"text":"// Load events\nval rddEventsEng = sc.binaryFiles(pathToSelection + \".export.CSV.zip\"). // charger quelques fichers via une regex\n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry)\n                .takeWhile{ case null => zis.close(); false\n                            case _ => true }\n                .flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n\nval dfEventsEng = rddEventsEng.map(x => x.split(\"\\t\")).map(row => row.mkString(\";\")).map(x => x.split(\";\")).toDF()\n\n// Load events (Translated)\nval rddEventsTrans = sc.binaryFiles(pathToSelection + \"translation.export.CSV.zip\"). // charger quelques fichers via une regex\n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry)\n                .takeWhile{ case null => zis.close(); false \n                            case _ => true }\n                .flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n\nval dfEventsTrans = rddEventsTrans.map(x => x.split(\"\\t\")).map(row => row.mkString(\";\")).map(x => x.split(\";\")).toDF()\n\n// make union\nval dfEvents = dfEventsEng.union(dfEventsTrans)","user":"anonymous","dateUpdated":"2020-01-23T00:13:38+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579249411306_-1896833707","id":"20200113-214349_421924857","dateCreated":"2020-01-17T08:23:31+0000","dateStarted":"2020-01-23T00:13:38+0000","dateFinished":"2020-01-23T00:13:39+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2397"},{"text":"// Load mentions\nval rddMentionsEng = sc.binaryFiles(pathToSelection + \".mentions.CSV.zip\"). // charger quelques fichers via une regex\n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry)\n                .takeWhile{ case null => zis.close(); false\n                            case _ => true }\n                .flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n\nval dfMentionsEng = rddMentionsEng.map(x => x.split(\"\\t\")).map(row => row.mkString(\";\")).map(x => x.split(\";\")).toDF()\n\nval rddMentionsTrans = sc.binaryFiles(pathToSelection + \"translation.mentions.CSV.zip\"). // charger quelques fichers via une regex\n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry)\n                .takeWhile{ case null => zis.close(); false \n                            case _ => true }\n                .flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n\nval dfMentionsTrans= rddMentionsTrans.map(x => x.split(\"\\t\")).map(row => row.mkString(\";\")).map(x => x.split(\";\")).toDF()\n\n// make union\nval dfMentions = dfMentionsEng.union(dfMentionsTrans)","user":"anonymous","dateUpdated":"2020-01-23T00:13:39+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579249411306_171583603","id":"20200113-215008_759201740","dateCreated":"2020-01-17T08:23:31+0000","dateStarted":"2020-01-23T00:13:39+0000","dateFinished":"2020-01-23T00:13:40+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2398"},{"text":"// Select columns and cast\nval dfEventsSelect = dfEvents\n    .withColumn(\"_tmp\", $\"value\")\n    .select($\"_tmp\".getItem(0).as(\"GlobalEventID\"),\n            udfToYear($\"_tmp\".getItem(1)).as(\"Year\"),\n            udfToMonth($\"_tmp\".getItem(1)).as(\"Month\"),\n            udfToDay($\"_tmp\".getItem(1)).as(\"Day\"),\n            $\"_tmp\".getItem(53).as(\"ActionGeoCountryCode\"))\n    .withColumn(\"GlobalEventID\", $\"GlobalEventID\".cast(\"Int\"))        \n\ndfEventsSelect.printSchema()","user":"anonymous","dateUpdated":"2020-01-23T00:13:40+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579249411307_-377606632","id":"20200113-215406_1630690280","dateCreated":"2020-01-17T08:23:31+0000","dateStarted":"2020-01-23T00:13:40+0000","dateFinished":"2020-01-23T00:13:40+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2400"},{"text":"// Select columns and cast\nval dfMentionsSelect = dfMentions\n    .withColumn(\"_tmp\", $\"value\")\n    .select($\"_tmp\".getItem(0).as(\"GlobalEventID\"),\n            $\"_tmp\".getItem(5).as(\"MentionIdentifier\"),\n            $\"_tmp\".getItem(14).as(\"Language\"))\n    .withColumn(\"GlobalEventID\", $\"GlobalEventID\".cast(\"Int\"))\n    .withColumn(\"Language\", when($\"language\".isNull, \"eng\")\n        .otherwise(substring_index($\"language\", \":\", -1)))\n\ndfMentionsSelect.printSchema()","user":"anonymous","dateUpdated":"2020-01-23T00:13:40+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579249411307_569073257","id":"20200113-215924_1788037184","dateCreated":"2020-01-17T08:23:31+0000","dateStarted":"2020-01-23T00:13:40+0000","dateFinished":"2020-01-23T00:13:40+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2401"},{"text":"// Join dataframe\nval dfRequest1 = dfMentionsSelect\n    .dropDuplicates(\"GlobalEventID\", \"MentionIdentifier\")\n    .join(dfEventsSelect, \"GlobalEventID\")\n    .groupBy(\"GlobalEventID\", \"Year\", \"Month\", \"Day\", \"Language\", \"ActionGeoCountryCode\")\n    .agg(count(\"MentionIdentifier\").as(\"NumArticles\"))\n    \ndfRequest1.show()","user":"anonymous","dateUpdated":"2020-01-23T10:54:58+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":11,"editorMode":"ace/mode/scala","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":484,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=50"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1579249411308_-377277240","id":"20200113-222446_1242746689","dateCreated":"2020-01-17T08:23:31+0000","dateStarted":"2020-01-23T00:13:40+0000","dateFinished":"2020-01-23T00:14:15+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2402"},{"text":"dfRequest1.count()","user":"anonymous","dateUpdated":"2020-01-23T00:14:15+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=51"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1579731091622_-1282500319","id":"20200122-221131_1138468293","dateCreated":"2020-01-22T22:11:31+0000","dateStarted":"2020-01-23T00:14:15+0000","dateFinished":"2020-01-23T00:14:54+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2403"},{"text":"dfRequest1.write.parquet(pathToParquet + \"request1\")","user":"anonymous","dateUpdated":"2020-01-23T00:16:05+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=53"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1579733940485_2133110627","id":"20200122-225900_199615060","dateCreated":"2020-01-22T22:59:00+0000","dateStarted":"2020-01-23T00:16:05+0000","dateFinished":"2020-01-23T00:16:44+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2404"},{"text":"%cassandra\n\nCREATE TABLE request1(\nGlobalEventID int,\nYear Int,\nMonth\nDay int,\nLanguage text,\nActionCountry text,\nNumArticles int,\nPRIMARY KEY (GlobalEventID, Year, Month, Day, Language, ActionCountry));","user":"anonymous","dateUpdated":"2020-01-23T10:48:48+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/undefined"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579368124284_1681094409","id":"20200118-172204_2091787346","dateCreated":"2020-01-18T17:22:04+0000","dateStarted":"2020-01-23T00:15:37+0000","dateFinished":"2020-01-23T00:15:38+0000","status":"ERROR","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2405"}],"name":"gdeltRequest1Local","id":"2EYB2ZBQK","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"sh:shared_process":[],"spark:shared_process":[],"cassandra:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}