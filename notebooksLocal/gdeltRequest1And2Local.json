{"paragraphs":[{"text":"%md\n\n## Requête 1\n\nDans ce notebook, nous construisons la requête 1:\n\n*Afficher le nombre d’articles/évènements qu’il y a eu pour chaque triplet (jour, pays de l’évènement, langue de l’article).*","user":"anonymous","dateUpdated":"2020-01-23T13:41:51+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Requête 1</h2>\n<p>Dans ce notebook, nous construisons la requête 1:</p>\n<p><em>Afficher le nombre d’articles/évènements qu’il y a eu pour chaque triplet (jour, pays de l’évènement, langue de l’article).</em></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579786911632_-1939615405","id":"20181212-102323_67420128","dateCreated":"2020-01-23T13:41:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:360"},{"text":"import org.apache.spark.sql.functions\nimport org.apache.spark.input.PortableDataStream\nimport org.apache.spark.sql.SaveMode\n\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\n\n","user":"anonymous","dateUpdated":"2020-01-23T13:57:50+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.functions\nimport org.apache.spark.input.PortableDataStream\nimport org.apache.spark.sql.SaveMode\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\n"}]},"apps":[],"jobName":"paragraph_1579786911636_-473552254","id":"20171217-232457_1732696781","dateCreated":"2020-01-23T13:41:51+0000","dateStarted":"2020-01-23T13:57:50+0000","dateFinished":"2020-01-23T13:57:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:361"},{"text":"// Select files\nval pathToSelection = \"/tmp/gdelt/data/2019120[1-2]*\"\n\n// Parquet files directory (keep / at the end)\nval pathToParquet = \"/tmp/gdelt/parquet/\"","user":"anonymous","dateUpdated":"2020-01-23T13:57:54+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"pathToSelection: String = /tmp/gdelt/data/2019120[1-2]*\npathToParquet: String = /tmp/gdelt/parquet/\n"}]},"apps":[],"jobName":"paragraph_1579786911636_-1846642548","id":"20200118-162838_1638931284","dateCreated":"2020-01-23T13:41:51+0000","dateStarted":"2020-01-23T13:57:54+0000","dateFinished":"2020-01-23T13:57:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:362"},{"text":"// define UDF functions\ndef toYear(s : String): Int = if (s.isEmpty) 0 else (s.slice(0, 0 + 4)).toInt\ndef toMonth(s : String): Int = if (s.isEmpty) 0 else (s.slice(4, 4 + 2)).toInt\ndef toDay(s : String): Int = if (s.isEmpty) 0 else (s.slice(6, 6 + 2)).toInt\n\ndef getTone(tones: String): Double = tones.split(\",\")(0).toDouble\n\n// define UDF\nval udfToYear = udf(toYear _)\nval udfToMonth = udf(toMonth _)\nval udfToDay = udf(toDay _)\n\nval udfGetTone = udf(getTone _)","user":"anonymous","dateUpdated":"2020-01-23T13:57:59+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"toYear: (s: String)Int\ntoMonth: (s: String)Int\ntoDay: (s: String)Int\ngetTone: (tones: String)Double\nudfToYear: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,IntegerType,Some(List(StringType)))\nudfToMonth: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,IntegerType,Some(List(StringType)))\nudfToDay: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,IntegerType,Some(List(StringType)))\nudfGetTone: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,DoubleType,Some(List(StringType)))\n"}]},"apps":[],"jobName":"paragraph_1579786911637_-689455072","id":"20200122-230129_983388208","dateCreated":"2020-01-23T13:41:51+0000","dateStarted":"2020-01-23T13:57:59+0000","dateFinished":"2020-01-23T13:57:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:363"},{"text":"// Load events\nval rddEventsEng = sc.binaryFiles(pathToSelection + \".export.CSV.zip\") // charger quelques fichers via une regex\n   .flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry)\n                .takeWhile{ case null => zis.close(); false\n                            case _ => true }\n                .flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n\nval dfEventsEng = rddEventsEng.map(x => x.split(\"\\t\")).map(row => row.mkString(\";\")).map(x => x.split(\";\")).toDF()\n\n// Load events (Translated)\nval rddEventsTrans = sc.binaryFiles(pathToSelection + \".translation.export.CSV.zip\") // charger quelques fichers via une regex\n   .flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry)\n                .takeWhile{ case null => zis.close(); false \n                            case _ => true }\n                .flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n\nval dfEventsTrans = rddEventsTrans.map(x => x.split(\"\\t\")).map(row => row.mkString(\";\")).map(x => x.split(\";\")).toDF()\n\n// make union\nval dfEvents = dfEventsEng.union(dfEventsTrans)","user":"anonymous","dateUpdated":"2020-01-23T13:58:04+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"rddEventsEng: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[1793] at flatMap at <console>:144\ndfEventsEng: org.apache.spark.sql.DataFrame = [value: array<string>]\nrddEventsTrans: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[1798] at flatMap at <console>:160\ndfEventsTrans: org.apache.spark.sql.DataFrame = [value: array<string>]\ndfEvents: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [value: array<string>]\n"}]},"apps":[],"jobName":"paragraph_1579786911637_-812372742","id":"20200113-214349_421924857","dateCreated":"2020-01-23T13:41:51+0000","dateStarted":"2020-01-23T13:58:04+0000","dateFinished":"2020-01-23T13:58:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:364"},{"text":"// Load mentions\nval rddMentionsEng = sc.binaryFiles(pathToSelection + \".mentions.CSV.zip\") // charger quelques fichers via une regex\n   .flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry)\n                .takeWhile{ case null => zis.close(); false\n                            case _ => true }\n                .flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n\nval dfMentionsEng = rddMentionsEng.map(x => x.split(\"\\t\")).map(row => row.mkString(\";\")).map(x => x.split(\";\")).toDF()\n\nval rddMentionsTrans = sc.binaryFiles(pathToSelection + \".translation.mentions.CSV.zip\") // charger quelques fichers via une regex\n   .flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry)\n                .takeWhile{ case null => zis.close(); false \n                            case _ => true }\n                .flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n\nval dfMentionsTrans= rddMentionsTrans.map(x => x.split(\"\\t\")).map(row => row.mkString(\";\")).map(x => x.split(\";\")).toDF()\n\n// make union\nval dfMentions = dfMentionsEng.union(dfMentionsTrans)","user":"anonymous","dateUpdated":"2020-01-23T13:58:10+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"rddMentionsEng: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[1803] at flatMap at <console>:144\ndfMentionsEng: org.apache.spark.sql.DataFrame = [value: array<string>]\nrddMentionsTrans: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[1808] at flatMap at <console>:159\ndfMentionsTrans: org.apache.spark.sql.DataFrame = [value: array<string>]\ndfMentions: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [value: array<string>]\n"}]},"apps":[],"jobName":"paragraph_1579786911637_585424706","id":"20200113-215008_759201740","dateCreated":"2020-01-23T13:41:51+0000","dateStarted":"2020-01-23T13:58:10+0000","dateFinished":"2020-01-23T13:58:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:365"},{"text":"// Select columns and cast\nval dfEventsSelect = dfEvents\n    .withColumn(\"_tmp\", $\"value\")\n    .select($\"_tmp\".getItem(0).as(\"GlobalEventID\"),\n            udfToYear($\"_tmp\".getItem(1)).as(\"Year\"),\n            udfToMonth($\"_tmp\".getItem(1)).as(\"Month\"),\n            udfToDay($\"_tmp\".getItem(1)).as(\"Day\"),\n            $\"_tmp\".getItem(53).as(\"ActionGeoCountryCode\"))\n    .withColumn(\"GlobalEventID\", $\"GlobalEventID\".cast(\"Int\"))        \n\ndfEventsSelect.printSchema()","user":"anonymous","dateUpdated":"2020-01-23T13:58:19+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- GlobalEventID: integer (nullable = true)\n |-- Year: integer (nullable = true)\n |-- Month: integer (nullable = true)\n |-- Day: integer (nullable = true)\n |-- ActionGeoCountryCode: string (nullable = true)\n\ndfEventsSelect: org.apache.spark.sql.DataFrame = [GlobalEventID: int, Year: int ... 3 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579786911638_957512746","id":"20200113-215406_1630690280","dateCreated":"2020-01-23T13:41:51+0000","dateStarted":"2020-01-23T13:58:19+0000","dateFinished":"2020-01-23T13:58:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:366"},{"text":"// Select columns and cast\nval dfMentionsSelect = dfMentions\n    .withColumn(\"_tmp\", $\"value\")\n    .select($\"_tmp\".getItem(0).as(\"GlobalEventID\"),\n            $\"_tmp\".getItem(5).as(\"MentionIdentifier\"),\n            $\"_tmp\".getItem(14).as(\"Language\"))\n    .withColumn(\"GlobalEventID\", $\"GlobalEventID\".cast(\"Int\"))\n    .withColumn(\"Language\", when($\"language\".isNull, \"eng\")\n        .otherwise(substring_index($\"language\", \":\", -1)))\n\ndfMentionsSelect.printSchema()","user":"anonymous","dateUpdated":"2020-01-23T13:58:27+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- GlobalEventID: integer (nullable = true)\n |-- MentionIdentifier: string (nullable = true)\n |-- Language: string (nullable = true)\n\ndfMentionsSelect: org.apache.spark.sql.DataFrame = [GlobalEventID: int, MentionIdentifier: string ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1579786911638_324242423","id":"20200113-215924_1788037184","dateCreated":"2020-01-23T13:41:51+0000","dateStarted":"2020-01-23T13:58:27+0000","dateFinished":"2020-01-23T13:58:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:367"},{"text":"## Requête 1\n\n*Afficher le nombre d’articles/évènements qu’il y a eu pour chaque triplet (jour, pays de l’évènement, langue de l’article).*","user":"anonymous","dateUpdated":"2020-01-23T14:02:28+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579788108294_-652724682","id":"20200123-140148_1018254693","dateCreated":"2020-01-23T14:01:48+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:368"},{"text":"// Join dataframe\nval dfRequest1 = dfMentionsSelect\n    .dropDuplicates(\"GlobalEventID\", \"MentionIdentifier\")\n    .join(dfEventsSelect, \"GlobalEventID\")\n    .groupBy(\"GlobalEventID\", \"Year\", \"Month\", \"Day\", \"Language\", \"ActionGeoCountryCode\")\n    .agg(count(\"MentionIdentifier\").as(\"NumArticles\"))\n    \ndfRequest1.show()","user":"anonymous","dateUpdated":"2020-01-23T13:58:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":11,"editorMode":"ace/mode/scala","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":484,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+----+-----+---+--------+--------------------+-----------+\n|GlobalEventID|Year|Month|Day|Language|ActionGeoCountryCode|NumArticles|\n+-------------+----+-----+---+--------+--------------------+-----------+\n|    890018652|2019|   12|  1|     eng|                  LE|          1|\n|    890019133|2019|   12|  1|     eng|                  UK|         10|\n|    890019133|2019|   12|  1|     spa|                  UK|          3|\n|    890019133|2019|   12|  1|     tur|                  UK|          8|\n|    890019293|2019|   12|  1|     eng|                  US|          3|\n|    890019345|2019|   12|  1|     eng|                  IZ|          1|\n|    890019498|2019|   12|  1|     eng|                  US|          1|\n|    890019589|2019|   12|  1|     eng|                  US|          1|\n|    890019949|2019|   12|  1|     eng|                  US|          1|\n|    890020458|2019|   12|  1|     fra|                    |          2|\n|    890020458|2019|   12|  1|     eng|                    |          2|\n|    890020893|2019|   12|  1|     spa|                  US|          2|\n|    890020930|2019|   12|  1|     deu|                  PM|          2|\n|    890021496|2019|   12|  1|     eng|                  CH|         13|\n|    890021496|2019|   12|  1|     ces|                  CH|          1|\n|    890021567|2019|   12|  1|     eng|                  US|          8|\n|    890021959|2019|   12|  1|     eng|                  US|          1|\n|    890022119|2019|   11|  1|     eng|                  JA|          2|\n|    890022327|2019|   12|  1|     eng|                  US|          1|\n|    890022355|2019|   12|  1|     eng|                  AF|          1|\n+-------------+----+-----+---+--------+--------------------+-----------+\nonly showing top 20 rows\n\ndfRequest1: org.apache.spark.sql.DataFrame = [GlobalEventID: int, Year: int ... 5 more fields]\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=88"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1579786911638_336559691","id":"20200113-222446_1242746689","dateCreated":"2020-01-23T13:41:51+0000","dateStarted":"2020-01-23T13:58:33+0000","dateFinished":"2020-01-23T13:59:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:369"},{"text":"dfRequest1.count()","user":"anonymous","dateUpdated":"2020-01-23T13:41:51+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res124: Long = 379481\n"}]},"apps":[],"jobName":"paragraph_1579786911639_1716502310","id":"20200122-221131_1138468293","dateCreated":"2020-01-23T13:41:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:370"},{"text":"// Save request 1 in Parquet\ndfRequest1\n    .write\n    .mode(SaveMode.Overwrite)\n    .parquet(pathToParquet + \"request1\")","user":"anonymous","dateUpdated":"2020-01-23T13:57:30+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.SaveMode\n"}]},"apps":[],"jobName":"paragraph_1579786911639_352639080","id":"20200122-225900_199615060","dateCreated":"2020-01-23T13:41:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:371"},{"text":"%md\n\n## Requête 2\n\n*Pour un pays donné en paramètre, affichez les évènements qui y ont eu place triés par le nombre de mentions (tri décroissant); permettez une agrégation par jour/mois/année.*","user":"anonymous","dateUpdated":"2020-01-23T13:52:07+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579786954802_1773848439","id":"20200123-134234_199327166","dateCreated":"2020-01-23T13:42:34+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:372"},{"text":"val dfRequest2 = dfMentionsSelect.select(\"GlobalEventID\")\n    .join(dfEventsSelect.filter(!($\"ActionGeoCountryCode\" === \"\")), \"GlobalEventID\")\n    .groupBy(\"ActionGeoCountryCode\", \"Year\", \"Month\", \"Day\", \"GlobalEventID\")\n    .agg(count(\"GlobalEventID\").as(\"NumMentions\"))\n    .orderBy($\"ActionGeoCountryCode\", $\"Year\", $\"Month\", $\"Day\", desc(\"NumMentions\"), $\"GlobalEventID\")\n\ndfRequest2.show(false)","user":"anonymous","dateUpdated":"2020-01-23T14:00:10+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+----+-----+---+-------------+-----------+\n|ActionGeoCountryCode|Year|Month|Day|GlobalEventID|NumMentions|\n+--------------------+----+-----+---+-------------+-----------+\n|AA                  |2019|12   |1  |890110869    |1          |\n|AA                  |2019|12   |2  |890311456    |4          |\n|AA                  |2019|12   |2  |890314195    |4          |\n|AA                  |2019|12   |2  |890260372    |1          |\n|AA                  |2019|12   |2  |890260554    |1          |\n|AC                  |2019|12   |1  |890043641    |1          |\n|AC                  |2019|12   |1  |890043642    |1          |\n|AC                  |2019|12   |1  |890043643    |1          |\n|AC                  |2019|12   |1  |890043644    |1          |\n|AC                  |2019|12   |1  |890043814    |1          |\n|AC                  |2019|12   |1  |890066559    |1          |\n|AC                  |2019|12   |1  |890066561    |1          |\n|AC                  |2019|12   |1  |890115405    |1          |\n|AC                  |2019|12   |1  |890115406    |1          |\n|AC                  |2019|12   |1  |890115407    |1          |\n|AC                  |2019|12   |1  |890115521    |1          |\n|AC                  |2019|12   |1  |890115522    |1          |\n|AC                  |2019|12   |1  |890115523    |1          |\n|AC                  |2019|12   |1  |890115524    |1          |\n|AC                  |2019|12   |1  |890121237    |1          |\n+--------------------+----+-----+---+-------------+-----------+\nonly showing top 20 rows\n\ndfRequest2: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [ActionGeoCountryCode: string, Year: int ... 4 more fields]\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=89"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1579787527335_-391486620","id":"20200123-135207_929282473","dateCreated":"2020-01-23T13:52:07+0000","dateStarted":"2020-01-23T14:00:10+0000","dateFinished":"2020-01-23T14:00:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:373"},{"text":"// Save request 2 in Parquet\ndfRequest2\n    .write\n    .mode(SaveMode.Overwrite)\n    .parquet(pathToParquet + \"request2\")\n","user":"anonymous","dateUpdated":"2020-01-23T14:07:28+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579787529152_1405071238","id":"20200123-135209_1047509445","dateCreated":"2020-01-23T13:52:09+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:374"},{"text":"%md\n## Exemple\n\n### Requete 1\n\n*Afficher le nombre d’articles/évènements qu’il y a eu pour chaque triplet (jour, pays de l’évènement, langue de l’article).*\n\nPour France (FR), le 2 décembre 2019","user":"anonymous","dateUpdated":"2020-01-23T14:24:28+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579788360272_940286681","id":"20200123-140600_1645617795","dateCreated":"2020-01-23T14:06:00+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:375"},{"text":"%md\n","user":"anonymous","dateUpdated":"2020-01-23T14:36:57+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579790217675_900126333","id":"20200123-143657_29731743","dateCreated":"2020-01-23T14:36:57+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:376"},{"text":"dfRequest1.ilter($\"Month\" === 2019\n                and $\"Month\" === 12\n                and $\"Day\" === 2)\n            .show()","user":"anonymous","dateUpdated":"2020-01-23T14:36:57+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+----+-----+---+--------+--------------------+-----------+\n|GlobalEventID|Year|Month|Day|Language|ActionGeoCountryCode|NumArticles|\n+-------------+----+-----+---+--------+--------------------+-----------+\n+-------------+----+-----+---+--------+--------------------+-----------+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=119","http://172.17.0.2:4040/jobs/job?id=120","http://172.17.0.2:4040/jobs/job?id=121","http://172.17.0.2:4040/jobs/job?id=122","http://172.17.0.2:4040/jobs/job?id=123"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1579789444728_420815530","id":"20200123-142404_1121756535","dateCreated":"2020-01-23T14:24:04+0000","dateStarted":"2020-01-23T14:35:58+0000","dateFinished":"2020-01-23T14:36:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:377"},{"text":"%md\n\n### Requete 2\n\n*Pour un pays donné en paramètre, affichez les évènements qui y ont eu place triés par le nombre de mentions (tri décroissant); permettez une agrégation par jour/mois/année.*\n\nPour France (FR), le 2 décembre 2019","user":"anonymous","dateUpdated":"2020-01-23T14:24:47+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579789280773_453939086","id":"20200123-142120_1791740465","dateCreated":"2020-01-23T14:21:20+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:378"},{"text":"dfRequest2.filter($\"ActionGeoCountryCode\" === \"FR\"\n                and $\"Year\" === 2019\n                and $\"Month\" === 12\n                and $\"Day\" === 2)\n            .show()","user":"anonymous","dateUpdated":"2020-01-23T14:17:47+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+----+-----+---+-------------+-----------+\n|ActionGeoCountryCode|Year|Month|Day|GlobalEventID|NumMentions|\n+--------------------+----+-----+---+-------------+-----------+\n|                  FR|2019|   12|  2|    890162467|        464|\n|                  FR|2019|   12|  2|    890170650|        424|\n|                  FR|2019|   12|  2|    890159632|        324|\n|                  FR|2019|   12|  2|    890155128|        278|\n|                  FR|2019|   12|  2|    890184246|        278|\n|                  FR|2019|   12|  2|    890184000|        276|\n|                  FR|2019|   12|  2|    890184399|        234|\n|                  FR|2019|   12|  2|    890290252|        232|\n|                  FR|2019|   12|  2|    890169016|        226|\n|                  FR|2019|   12|  2|    890179324|        178|\n|                  FR|2019|   12|  2|    890212147|        162|\n|                  FR|2019|   12|  2|    890175946|        160|\n|                  FR|2019|   12|  2|    890155329|        158|\n|                  FR|2019|   12|  2|    890155333|        154|\n|                  FR|2019|   12|  2|    890177534|        153|\n|                  FR|2019|   12|  2|    890177535|        153|\n|                  FR|2019|   12|  2|    890196924|        152|\n|                  FR|2019|   12|  2|    890262261|        148|\n|                  FR|2019|   12|  2|    890171307|        147|\n|                  FR|2019|   12|  2|    890151478|        146|\n+--------------------+----+-----+---+-------------+-----------+\nonly showing top 20 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=93"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1579788419819_-1551578082","id":"20200123-140659_1761155201","dateCreated":"2020-01-23T14:06:59+0000","dateStarted":"2020-01-23T14:17:47+0000","dateFinished":"2020-01-23T14:18:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:379"},{"text":"%cassandra\n\nCREATE TABLE request1(\nGlobalEventID int,\nYear Int,\nMonth\nDay int,\nLanguage text,\nActionCountry text,\nNumArticles int,\nPRIMARY KEY (GlobalEventID, Year, Month, Day, Language, ActionCountry));","user":"anonymous","dateUpdated":"2020-01-23T13:41:51+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/undefined","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579786911639_498019515","id":"20200118-172204_2091787346","dateCreated":"2020-01-23T13:41:51+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:380"}],"name":"gdeltRequest1And2Local","id":"2EXDUAPDC","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"sh:shared_process":[],"spark:shared_process":[],"cassandra:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}