{"paragraphs":[{"text":"%md\n## Requete 2\n\nDans ce notebook, nous construisons la requête 2:\n\n\n*Pour un pays donné en paramètre, affichez les évènements qui y ont eu place triés par le nombre de mentions (tri décroissant); permettez une agrégation par jour/mois/année*","user":"anonymous","dateUpdated":"2020-01-22T23:10:32+0000","config":{"tableHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Requete 2</h2>\n<p>Dans ce notebook nous explorons en local les données GDELT</p>\n<p>Pour un pays donné en paramètre, affichez les évènements qui y ont eu place triées par le nombre de mentions (tri décroissant); permettez une agrégation par jour/mois/année</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1579367878336_-72280159","id":"20181212-102323_67420128","dateCreated":"2020-01-18T17:17:58+0000","dateStarted":"2020-01-22T23:09:27+0000","dateFinished":"2020-01-22T23:09:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2636"},{"text":"import org.apache.spark.sql.functions\nimport org.apache.spark.input.PortableDataStream\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader","user":"anonymous","dateUpdated":"2020-01-22T23:11:37+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.functions\nimport org.apache.spark.input.PortableDataStream\nimport java.util.zip.ZipInputStream\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\n"}]},"apps":[],"jobName":"paragraph_1579367878342_1482744348","id":"20171217-232457_1732696781","dateCreated":"2020-01-18T17:17:58+0000","dateStarted":"2020-01-22T23:11:37+0000","dateFinished":"2020-01-22T23:11:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2637"},{"text":"// Select files\nval pathToSelection = \"/tmp/gdelt/data/2019120[1-2][0-9]*\"\n\n// Parquet files directory\nval pathToParquet = \"/tmp/gdelt/spark\"","user":"anonymous","dateUpdated":"2020-01-22T23:11:39+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"pathToSelection: String = /tmp/gdelt/data/2019120[1-2][0-9]*\npathToParquet: String = /tmp/gdelt/spark\n"}]},"apps":[],"jobName":"paragraph_1579367878343_349502433","id":"20200118-162838_1638931284","dateCreated":"2020-01-18T17:17:58+0000","dateStarted":"2020-01-22T23:11:39+0000","dateFinished":"2020-01-22T23:11:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2638"},{"text":"// define functons\ndef toYear(s : String): Int = if (s.isEmpty) 0 else (s.slice(0, 0 + 4)).toInt\ndef toMonth(s : String): Int = if (s.isEmpty) 0 else (s.slice(4, 4 + 2)).toInt\ndef toDay(s : String): Int = if (s.isEmpty) 0 else (s.slice(6, 6 + 2)).toInt\n\ndef getTone(tones: String): Double = tones.split(\",\")(0).toDouble\n\n// define UDF\nval udfToYear = udf(toYear _)\nval udfToMonth = udf(toMonth _)\nval udfToDay = udf(toDay _)\n\nval udfGetTone = udf(getTone _)","user":"anonymous","dateUpdated":"2020-01-22T23:11:42+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"toYear: (s: String)Int\ntoMonth: (s: String)Int\ntoDay: (s: String)Int\ngetTone: (tones: String)Double\nudfToYear: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,IntegerType,Some(List(StringType)))\nudfToMonth: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,IntegerType,Some(List(StringType)))\nudfToDay: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,IntegerType,Some(List(StringType)))\nudfGetTone: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,DoubleType,Some(List(StringType)))\n"}]},"apps":[],"jobName":"paragraph_1579734534960_-1009515601","id":"20200122-230854_1878173088","dateCreated":"2020-01-22T23:08:54+0000","dateStarted":"2020-01-22T23:11:42+0000","dateFinished":"2020-01-22T23:11:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2639"},{"text":"// Load events\nval rddEventsEng = sc.binaryFiles(pathToSelection + \".export.CSV.zip\"). // charger quelques fichers via une regex\n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry)\n                .takeWhile{ case null => zis.close(); false\n                            case _ => true }\n                .flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n\nval dfEventsEng = rddEventsEng.map(x => x.split(\"\\t\")).map(row => row.mkString(\";\")).map(x => x.split(\";\")).toDF()\n\n// Load events (Translated)\nval rddEventsTrans = sc.binaryFiles(pathToSelection + \"translation.export.CSV.zip\"). // charger quelques fichers via une regex\n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry)\n                .takeWhile{ case null => zis.close(); false\n                            case _ => true }\n                .flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n\nval dfEventsTrans = rddEventsTrans.map(x => x.split(\"\\t\")).map(row => row.mkString(\";\")).map(x => x.split(\";\")).toDF()\n\n// make union\nval dfEvents = dfEventsEng.union(dfEventsTrans)","user":"anonymous","dateUpdated":"2020-01-22T23:13:23+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"rddEventsEng: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[639] at flatMap at <console>:102\ndfEventsEng: org.apache.spark.sql.DataFrame = [value: array<string>]\nrddEventsTrans: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[644] at flatMap at <console>:118\ndfEventsTrans: org.apache.spark.sql.DataFrame = [value: array<string>]\ndfEvents: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [value: array<string>]\n"}]},"apps":[],"jobName":"paragraph_1579367878344_-1488569116","id":"20200113-214349_421924857","dateCreated":"2020-01-18T17:17:58+0000","dateStarted":"2020-01-22T23:13:23+0000","dateFinished":"2020-01-22T23:13:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2640"},{"text":"// Load mentions\nval rddMentionsEng = sc.binaryFiles(pathToSelection + \".mentions.CSV.zip\"). // charger quelques fichers via une regex\n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry)\n                .takeWhile{ case null => zis.close(); false\n                            case _ => true }\n                .flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n\nval dfMentionsEng = rddMentionsEng.map(x => x.split(\"\\t\")).map(row => row.mkString(\";\")).map(x => x.split(\";\")).toDF()\n\nval rddMentionsTrans = sc.binaryFiles(pathToSelection + \"translation.mentions.CSV.zip\"). // charger quelques fichers via une regex\n   flatMap {  // decompresser les fichiers\n       case (name: String, content: PortableDataStream) =>\n          val zis = new ZipInputStream(content.open)\n          Stream.continually(zis.getNextEntry)\n                .takeWhile{ case null => zis.close(); false\n                            case _ => true }\n                .flatMap { _ =>\n                    val br = new BufferedReader(new InputStreamReader(zis))\n                    Stream.continually(br.readLine()).takeWhile(_ != null)\n                }\n    }\n\nval dfMentionsTrans= rddMentionsTrans.map(x => x.split(\"\\t\")).map(row => row.mkString(\";\")).map(x => x.split(\";\")).toDF()\n\n// make union\nval dfMentions = dfMentionsEng.union(dfMentionsTrans)","user":"anonymous","dateUpdated":"2020-01-22T23:14:00+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"rddMentionsEng: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[649] at flatMap at <console>:102\ndfMentionsEng: org.apache.spark.sql.DataFrame = [value: array<string>]\nrddMentionsTrans: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[654] at flatMap at <console>:117\ndfMentionsTrans: org.apache.spark.sql.DataFrame = [value: array<string>]\ndfMentions: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [value: array<string>]\n"}]},"apps":[],"jobName":"paragraph_1579367878345_-299054180","id":"20200113-215008_759201740","dateCreated":"2020-01-18T17:17:58+0000","dateStarted":"2020-01-22T23:14:00+0000","dateFinished":"2020-01-22T23:14:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2641"},{"text":"// Select columns and cast\nval dfEventsSelect = dfEvents\n    .withColumn(\"_tmp\", $\"value\")\n    .select($\"_tmp\".getItem(0).as(\"GlobalEventID\"),\n            udfToYear($\"_tmp\".getItem(1)).as(\"Year\"),\n            udfToMonth($\"_tmp\".getItem(1)).as(\"Month\"),\n            udfToDay($\"_tmp\".getItem(1)).as(\"Day\"),\n            $\"_tmp\".getItem(53).as(\"ActionGeoCountryCode\"))\n    .withColumn(\"GlobalEventID\", $\"GlobalEventID\".cast(\"Int\"))        \n\ndfEventsSelect.printSchema()","user":"anonymous","dateUpdated":"2020-01-22T23:54:46+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- GlobalEventID: integer (nullable = true)\n |-- Year: integer (nullable = true)\n |-- Month: integer (nullable = true)\n |-- Day: integer (nullable = true)\n |-- ActionGeoCountryCode: string (nullable = true)\n\ndfEventsSelect: org.apache.spark.sql.DataFrame = [GlobalEventID: int, Year: int ... 3 more fields]\n"}]},"apps":[],"jobName":"paragraph_1579367878346_463885490","id":"20200113-215406_1630690280","dateCreated":"2020-01-18T17:17:58+0000","dateStarted":"2020-01-22T23:54:46+0000","dateFinished":"2020-01-22T23:54:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2642"},{"text":"// Select columns and cast\nval dfMentionsSelect = dfMentions\n    .withColumn(\"_tmp\", $\"value\")\n    .select($\"_tmp\".getItem(0).as(\"GlobalEventID\"),\n            $\"_tmp\".getItem(5).as(\"MentionIdentifier\"),\n            $\"_tmp\".getItem(14).as(\"Language\"))\n    .withColumn(\"GlobalEventID\", $\"GlobalEventID\".cast(\"Int\"))\n    .withColumn(\"Language\", when($\"language\".isNull, \"eng\")\n        .otherwise(substring_index($\"language\", \":\", -1)))\n\ndfMentionsSelect.printSchema()","user":"anonymous","dateUpdated":"2020-01-22T23:54:24+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- GlobalEventID: integer (nullable = true)\n |-- MentionIdentifier: string (nullable = true)\n |-- Language: string (nullable = true)\n\ndfMentions_2: org.apache.spark.sql.DataFrame = [GlobalEventID: int, MentionIdentifier: string ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1579367878347_-1879251218","id":"20200113-215924_1788037184","dateCreated":"2020-01-18T17:17:58+0000","dateStarted":"2020-01-22T23:19:44+0000","dateFinished":"2020-01-22T23:19:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2643"},{"text":"// Join dataframe\nval df_2 = dfMentionsSelect\n    .join(dfEventsSelect.filter(!($\"ActionGeoCountryCode\" === \"\")), \"GlobalEventID\")\n\ndf_2.show()","user":"anonymous","dateUpdated":"2020-01-22T23:54:50+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+--------------------+--------+----+-----+---+--------------------+\n|GlobalEventID|   MentionIdentifier|Language|Year|Month|Day|ActionGeoCountryCode|\n+-------------+--------------------+--------+----+-----+---+--------------------+\n|    890018652|http://www.orland...|     eng|2019|   12|  1|                  LE|\n|    890019133|https://vaalweekb...|     eng|2019|   12|  1|                  UK|\n|    890019133|https://rekordeas...|     eng|2019|   12|  1|                  UK|\n|    890019133|https://carletonv...|     eng|2019|   12|  1|                  UK|\n|    890019133|https://www.turki...|     tur|2019|   12|  1|                  UK|\n|    890019133|http://www.turkiy...|     tur|2019|   12|  1|                  UK|\n|    890019133|http://dunyanews....|     eng|2019|   12|  1|                  UK|\n|    890019133|https://townhall....|     eng|2019|   12|  1|                  UK|\n|    890019133|https://lowvelder...|     eng|2019|   12|  1|                  UK|\n|    890019133|https://www.thegu...|     eng|2019|   12|  1|                  UK|\n|    890019133|https://www.msn.c...|     eng|2019|   12|  1|                  UK|\n|    890019133|https://www.pagin...|     spa|2019|   12|  1|                  UK|\n|    890019133|https://www.sonda...|     tur|2019|   12|  1|                  UK|\n|    890019133|https://zululando...|     eng|2019|   12|  1|                  UK|\n|    890019133|https://publimetr...|     spa|2019|   12|  1|                  UK|\n|    890019133|https://peru21.pe...|     spa|2019|   12|  1|                  UK|\n|    890019133|http://www.gazete...|     tur|2019|   12|  1|                  UK|\n|    890019133|https://www.haber...|     tur|2019|   12|  1|                  UK|\n|    890019133|https://www.haber...|     tur|2019|   12|  1|                  UK|\n|    890019133|https://www.f5hab...|     tur|2019|   12|  1|                  UK|\n+-------------+--------------------+--------+----+-----+---+--------------------+\nonly showing top 20 rows\n\ndf_2: org.apache.spark.sql.DataFrame = [GlobalEventID: int, MentionIdentifier: string ... 5 more fields]\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=44"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1579383768081_1588132240","id":"20200118-214248_722446985","dateCreated":"2020-01-18T21:42:48+0000","dateStarted":"2020-01-22T23:54:50+0000","dateFinished":"2020-01-22T23:55:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2644"},{"text":"dfEvents_2.count()","user":"anonymous","dateUpdated":"2020-01-22T23:50:25+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res61: Long = 471902\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=41"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1579737008102_485199805","id":"20200122-235008_779532369","dateCreated":"2020-01-22T23:50:08+0000","dateStarted":"2020-01-22T23:50:25+0000","dateFinished":"2020-01-22T23:50:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2645"},{"text":"// Aggregation by day\nval df_2_processed_1 = df_2\n    .groupBy(\"ActionGeoCountryCode\", \"Year\", \"Month\", \"Day\", \"GlobalEventID\")\n    .agg(count(\"GlobalEventID\").as(\"numMentions\"))\n    .orderBy($\"ActionGeoCountryCode\", $\"Year\", $\"Month\", $\"Day\", desc(\"numMentions\"), $\"GlobalEventID\")\n//    .where($\"ActionGeoCountryCode\" === \"FR\")\n    \ndf_2_processed_1.show(false)","user":"anonymous","dateUpdated":"2020-01-22T23:55:44+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+----+-----+---+-------------+-----------+\n|ActionGeoCountryCode|Year|Month|Day|GlobalEventID|numMentions|\n+--------------------+----+-----+---+-------------+-----------+\n|AA                  |2019|12   |1  |890110869    |1          |\n|AA                  |2019|12   |2  |890311456    |4          |\n|AA                  |2019|12   |2  |890314195    |4          |\n|AA                  |2019|12   |2  |890260372    |1          |\n|AA                  |2019|12   |2  |890260554    |1          |\n|AC                  |2019|12   |1  |890043641    |1          |\n|AC                  |2019|12   |1  |890043642    |1          |\n|AC                  |2019|12   |1  |890043643    |1          |\n|AC                  |2019|12   |1  |890043644    |1          |\n|AC                  |2019|12   |1  |890043814    |1          |\n|AC                  |2019|12   |1  |890066559    |1          |\n|AC                  |2019|12   |1  |890066561    |1          |\n|AC                  |2019|12   |1  |890115405    |1          |\n|AC                  |2019|12   |1  |890115406    |1          |\n|AC                  |2019|12   |1  |890115407    |1          |\n|AC                  |2019|12   |1  |890115521    |1          |\n|AC                  |2019|12   |1  |890115522    |1          |\n|AC                  |2019|12   |1  |890115523    |1          |\n|AC                  |2019|12   |1  |890115524    |1          |\n|AC                  |2019|12   |1  |890121237    |1          |\n+--------------------+----+-----+---+-------------+-----------+\nonly showing top 20 rows\n\ndf_2_processed_1: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [ActionGeoCountryCode: string, Year: int ... 4 more fields]\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=45"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1579367878349_-408397239","id":"20200117-095207_1508751233","dateCreated":"2020-01-18T17:17:58+0000","dateStarted":"2020-01-22T23:55:44+0000","dateFinished":"2020-01-22T23:56:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2646"},{"text":"df_2_processed_1.count()","user":"anonymous","dateUpdated":"2020-01-22T23:56:56+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res68: Long = 339849\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=46","http://172.17.0.2:4040/jobs/job?id=47"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1579737398606_-455270621","id":"20200122-235638_1664924576","dateCreated":"2020-01-22T23:56:38+0000","dateStarted":"2020-01-22T23:56:56+0000","dateFinished":"2020-01-22T23:57:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2647"},{"text":"val tmp_2 = dfMentionsSelect\n    .groupBy(\"GlobalEventID\", \"Year\", \"Month\", \"Day\",\n    .agg(count(\"GlobalEventID\").as(\"numMentions\"))\n    .join(dfEventsSelect.filter(!($\"ActionGeoCountryCode\" === \"\")), \"GlobalEventID\")","user":"anonymous","dateUpdated":"2020-01-22T23:59:57+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579737421218_1246435082","id":"20200122-235701_1435725095","dateCreated":"2020-01-22T23:57:01+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:2648"},{"text":"// Aggregation by day\nval tmp_1 = dfMentionsSelect\n    .groupBy(\"GlobalEventID\")\n    .agg(count(\"GlobalEventID\").as(\"numMentions\"))\n    .join(dfEventsSelect.filter(!($\"ActionGeoCountryCode\" === \"\")), \"GlobalEventID\")\n    .orderBy($\"ActionGeoCountryCode\", $\"Year\", $\"Month\", $\"Day\", desc(\"numMentions\"), $\"GlobalEventID\")\n//    .where($\"ActionGeoCountryCode\" === \"FR\")\n    \ntmp_1.show(false)","user":"anonymous","dateUpdated":"2020-01-23T00:06:44+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+-----------+----+-----+---+--------------------+\n|GlobalEventID|numMentions|Year|Month|Day|ActionGeoCountryCode|\n+-------------+-----------+----+-----+---+--------------------+\n|890110869    |1          |2019|12   |1  |AA                  |\n|890311456    |2          |2019|12   |2  |AA                  |\n|890311456    |2          |2019|12   |2  |AA                  |\n|890314195    |2          |2019|12   |2  |AA                  |\n|890314195    |2          |2019|12   |2  |AA                  |\n|890260372    |1          |2019|12   |2  |AA                  |\n|890260554    |1          |2019|12   |2  |AA                  |\n|890043641    |1          |2019|12   |1  |AC                  |\n|890043642    |1          |2019|12   |1  |AC                  |\n|890043643    |1          |2019|12   |1  |AC                  |\n|890043644    |1          |2019|12   |1  |AC                  |\n|890043814    |1          |2019|12   |1  |AC                  |\n|890066559    |1          |2019|12   |1  |AC                  |\n|890066561    |1          |2019|12   |1  |AC                  |\n|890115405    |1          |2019|12   |1  |AC                  |\n|890115406    |1          |2019|12   |1  |AC                  |\n|890115407    |1          |2019|12   |1  |AC                  |\n|890115521    |1          |2019|12   |1  |AC                  |\n|890115522    |1          |2019|12   |1  |AC                  |\n|890115523    |1          |2019|12   |1  |AC                  |\n+-------------+-----------+----+-----+---+--------------------+\nonly showing top 20 rows\n\ntmp_1: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [GlobalEventID: int, numMentions: bigint ... 4 more fields]\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=49"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1579735456719_584165907","id":"20200122-232416_1664007337","dateCreated":"2020-01-22T23:24:16+0000","dateStarted":"2020-01-23T00:06:44+0000","dateFinished":"2020-01-23T00:07:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2649"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1579737778113_1144119277","id":"20200123-000258_649431139","dateCreated":"2020-01-23T00:02:58+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:2650"}],"name":"gdeltRequest2Local","id":"2EX8AYNZN","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"sh:shared_process":[],"spark:shared_process":[],"cassandra:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}